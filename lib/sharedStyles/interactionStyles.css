/**
 * Universal Interaction Styles
 * @variables-needs-updating
 */

/* stylelint-disable no-descending-specificity  */

@import '../variables.css';

:root {
  --focus-dot-offset-default: var(--gutter-static-one-third);
  --focus-dot-offset-small: calc(var(--gutter-static-one-third) * -1);
  --focus-dot-offset-medium: calc(var(--gutter-static-two-thirds) * -1);
  --focus-dot-offset-large: calc(var(--gutter-static) * -1);
  --box-offset-small: calc(var(--gutter-static-one-third) * -1);
  --box-offset-medium: calc(var(--gutter-static-two-thirds) * -1);
  --box-offset-large: calc(var(--gutter-static) * -1);
}

.interactionStyles {
  position: relative;
  outline: none;
  z-index: 1;
}

.interactionStyles * {
  z-index: 2;
}

/**
 * Disabled state
 */
.interactionStylesControl:disabled > .interactionStyles,
.interactionStyles:disabled {
  opacity: 0.5;
  cursor: default;

  &::before,
  &::after {
    display: none;
  }
}

/**
 * Focus/active pseudo element
 */
.interactionStyles::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: transparent;
  border-radius: var(--radius);
  z-index: -1;
}

/**
 * Focus Dot pseudo element
 */
.interactionStyles::before {
  content: "";
  opacity: 0;
  visibility: hidden;
  position: absolute;
  transform: translateY(-50%) translateX(-50%) scale(1);
  min-width: 4px;
  width: 4px;
  height: 4px;
  border-radius: 999px;
  display: block;
  z-index: 2;
  background-color: rgb(0, 0, 0);
}

/* Focus dot start */
:not([dir="rtl"]) .interactionStyles.focusDotPositionStart::before {
  left: var(--focus-dot-offset-default);
  top: 50%;
}

[dir="rtl"] .interactionStyles.focusDotPositionStart::before {
  right: var(--focus-dot-offset-default);
  top: 50%;
}

/* Focus dot end */
:not([dir="rtl"]) .interactionStyles.focusDotPositionEnd::before {
  right: var(--focus-dot-offset-default);
  top: 50%;
}

[dir="rtl"] .interactionStyles.focusDotPositionEnd::before {
  left: var(--focus-dot-offset-default);
  top: 50%;
}

/* Focus dot top */
.interactionStyles.focusDotPositionTop::before {
  top: var(--focus-dot-offset-default);
  transform: translateX(-50%) scale(1);
  left: 50%;
}

/* Focus dot bottom */
.interactionStyles.focusDotPositionBottom::before {
  bottom: var(--focus-dot-offset-default);
  transform: translateX(-50%) scale(1);
  left: 50%;
}

/**
 * Focus Dot Offsets
 */

/* small focus dot offset */
:not([dir="rtl"]) .interactionStyles.focusDotPositionStart.focusDotOffsetSmall::before { left: var(--focus-dot-offset-small); }
[dir="rtl"] .interactionStyles.focusDotPositionStart.focusDotOffsetSmall::before { right: var(--focus-dot-offset-small); }

:not([dir="rtl"]) .interactionStyles.focusDotPositionEnd.focusDotOffsetSmall::before { right: var(--focus-dot-offset-small); }
[dir="rtl"] .interactionStyles.focusDotPositionEnd.focusDotOffsetSmall::before { left: var(--focus-dot-offset-small); }

.interactionStyles.focusDotPositionTop.focusDotOffsetSmall::before { top: var(--focus-dot-offset-small); }
.interactionStyles.focusDotPositionBottom.focusDotOffsetSmall::before { bottom: var(--focus-dot-offset-small); }

/* medium focus dot offset */
:not([dir="rtl"]) .interactionStyles.focusDotPositionStart.focusDotOffsetMedium::before { left: var(--focus-dot-offset-medium); }
[dir="rtl"] .interactionStyles.focusDotPositionStart.focusDotOffsetMedium::before { right: var(--focus-dot-offset-medium); }

:not([dir="rtl"]) .interactionStyles.focusDotPositionEnd.focusDotOffsetMedium::before { right: var(--focus-dot-offset-medium); }
[dir="rtl"] .interactionStyles.focusDotPositionEnd.focusDotOffsetMedium::before { left: var(--focus-dot-offset-medium); }

.interactionStyles.focusDotPositionTop.focusDotOffsetMedium::before { top: var(--focus-dot-offset-medium); }
.interactionStyles.focusDotPositionBottom.focusDotOffsetMedium::before { bottom: var(--focus-dot-offset-medium); }

/* large focus dot offset */
:not([dir="rtl"]) .interactionStyles.focusDotPositionStart.focusDotOffsetLarge::before { left: var(--focus-dot-offset-large); }
[dir="rtl"] .interactionStyles.focusDotPositionStart.focusDotOffsetLarge::before { right: var(--focus-dot-offset-large); }

:not([dir="rtl"]) .interactionStyles.focusDotPositionEnd.focusDotOffsetLarge::before { right: var(--focus-dot-offset-large); }
[dir="rtl"] .interactionStyles.focusDotPositionEnd.focusDotOffsetLarge::before { left: var(--focus-dot-offset-large); }

.interactionStyles.focusDotPositionTop.focusDotOffsetLarge::before { top: var(--focus-dot-offset-large); }
.interactionStyles.focusDotPositionBottom.focusDotOffsetLarge::before { bottom: var(--focus-dot-offset-large); }

/**
 * Hover
 */

.isHovered::after,
.interactionStylesControl:hover > .interactionStyles::after,
.interactionStyles:hover::after {
  background: var(--color-fill-hover);
}

.interactionStyles:hover {
  cursor: pointer;
}

/**
 * Focus
 */
.isFocused::after,
.interactionStylesControl:focus > .interactionStyles::after,
.interactionStyles:focus::after {
  background: var(--color-fill-focus);
  border: 1px solid var(--color-border);
  box-shadow: 0 0 0 3px var(--color-fill-focus);
}

.isFocused.hasDot::before,
.interactionStylesControl:focus > .interactionStyles.hasDot::before,
.interactionStyles.hasDot:focus::before {
  visibility: visible;
  opacity: 1;
}

/**
 * Active
 */
.isActive,
.interactionStylesControl:active > .interactionStyles,
.interactionStyles:active {
  color: #fff;
  & * { color: #fff; }
  & svg { fill: #fff; }
}

.isActive::after,
.interactionStylesControl:active > .interactionStyles::after,
.interactionStyles:active::after {
  background: var(--color-fill-active);
  border: 1px solid var(--color-border);
  color: #fff;
}

.interactionStyles.hasDot.isActive:active::before,
.interactionStylesControl:active > .interactionStyles.hasDot::before,
.interactionStyles.hasDot:active::before {
  background-color: #fff;
  visibility: visible;
  opacity: 1;
}

/**
 * Box Offset
 */

/* Apply to all sides */
.interactionStyles.boxOffsetSmall::after {
  left: var(--box-offset-small);
  right: var(--box-offset-small);
  top: var(--box-offset-small);
  bottom: var(--box-offset-small);
}

.interactionStyles.boxOffsetMedium::after {
  left: var(--box-offset-medium);
  right: var(--box-offset-medium);
  top: var(--box-offset-medium);
  bottom: var(--box-offset-medium);
}

.interactionStyles.boxOffsetLarge::after {
  left: var(--box-offset-large);
  right: var(--box-offset-large);
  top: var(--box-offset-large);
  bottom: var(--box-offset-large);
}

/* Apply to start only */
:not([dir="rtl"]) .interactionStyles.boxOffsetStartSmall::after { left: var(--box-offset-small); }
[dir="rtl"] .interactionStyles.boxOffsetStartSmall::after { right: var(--box-offset-small); }

:not([dir="rtl"]) .interactionStyles.boxOffsetStartMedium::after { left: var(--box-offset-medium); }
[dir="rtl"] .interactionStyles.boxOffsetStartMedium::after { right: var(--box-offset-medium); }

:not([dir="rtl"]) .interactionStyles.boxOffsetStartLarge::after { left: var(--box-offset-large); }
[dir="rtl"] .interactionStyles.boxOffsetStartLarge::after { right: var(--box-offset-large); }

/* Apply to end only */
:not([dir="rtl"]) .interactionStyles.boxOffsetEndSmall::after { right: var(--box-offset-small); }
[dir="rtl"] .interactionStyles.boxOffsetEndSmall::after { left: var(--box-offset-small); }

:not([dir="rtl"]) .interactionStyles.boxOffsetEndMedium::after { right: var(--box-offset-medium); }
[dir="rtl"] .interactionStyles.boxOffsetEndMedium::after { left: var(--box-offset-medium); }

:not([dir="rtl"]) .interactionStyles.boxOffsetEndLarge::after { right: var(--box-offset-large); }
[dir="rtl"] .interactionStyles.boxOffsetEndLarge::after { left: var(--box-offset-large); }

/* Apply to top only */
.interactionStyles.boxOffsetTopSmall::after { top: var(--box-offset-small); }
.interactionStyles.boxOffsetTopMedium::after { top: var(--box-offset-medium); }
.interactionStyles.boxOffsetTopLarge::after { top: var(--box-offset-large); }

/* Apply to bottom only */
.interactionStyles.boxOffsetBottomSmall::after { bottom: var(--box-offset-small); }
.interactionStyles.boxOffsetBottomMedium::after { bottom: var(--box-offset-medium); }
.interactionStyles.boxOffsetBottomLarge::after { bottom: var(--box-offset-large); }
